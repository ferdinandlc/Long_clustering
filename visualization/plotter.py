import matplotlib.pyplot as pltimport seaborn as snsimport numpy as npimport pandas as pdfrom sklearn import metricsdef compute_metrics(dic_clus, commu, nb_steps = 25):    dic_AMI, dic_ARI, dic_H, dic_C, dic_FMI, dic_NBCOM = {}, {}, {}, {}, {}, {}        for clus_name in dic_clus.keys():        ami_list, ari_list, h_list, c_list, fmi_list, nbcom_list = [], [], [], [], [], []            for step in range(nb_steps):            predicted_labels = []            true_labels = []                communities = np.unique([dic_clus[clus_name][-1][i][step] for i in range(500)])            communities = communities[communities != -1]                for i in range(500):                node = int(dic_clus[clus_name][1][step][i]) if len(dic_clus[clus_name][1]) > 0 else i                true_labels.append(commu[step][node])                predicted_labels.append(dic_clus[clus_name][-1][i][step])                ami_list.append(metrics.adjusted_mutual_info_score(true_labels, predicted_labels))            ari_list.append(metrics.adjusted_rand_score(true_labels, predicted_labels))            h_list.append(metrics.homogeneity_score(true_labels, predicted_labels))            c_list.append(metrics.completeness_score(true_labels, predicted_labels))            fmi_list.append(metrics.fowlkes_mallows_score(true_labels, predicted_labels))            nbcom_list.append(len(communities))            dic_AMI[clus_name] = ami_list        dic_ARI[clus_name] = ari_list        dic_H[clus_name] = h_list        dic_C[clus_name] = c_list        dic_FMI[clus_name] = fmi_list        dic_NBCOM[clus_name] = nbcom_list            return dic_AMI, dic_ARI, dic_H, dic_C, dic_FMI, dic_NBCOMdef compute_perturb_metrics(dic_clus, commu, labels, nb_steps =25):        dic_pAMI, dic_pARI, dic_pH, dic_pC, dic_pFMI = {}, {}, {}, {}, {}        for clus_name in dic_clus.keys():        pami_list, pari_list, ph_list, pc_list, pfmi_list,  = [], [], [], [], []            for step in range(nb_steps):            predicted_labels = []            true_labels = []                communities = np.unique([dic_clus[clus_name][-1][i][step] for i in range(500)])            communities = communities[communities != -1]                for i in range(500):                node = int(dic_clus[clus_name][1][step][i]) if len(dic_clus[clus_name][1]) > 0 else i                if (labels[step][node] == 'perturbation'):                    true_labels.append(commu[step][node])                    predicted_labels.append(dic_clus[clus_name][-1][i][step])                pami_list.append(metrics.adjusted_mutual_info_score(true_labels, predicted_labels))            pari_list.append(metrics.adjusted_rand_score(true_labels, predicted_labels))            ph_list.append(metrics.homogeneity_score(true_labels, predicted_labels))            pc_list.append(metrics.completeness_score(true_labels, predicted_labels))            pfmi_list.append(metrics.fowlkes_mallows_score(true_labels, predicted_labels))            dic_pAMI[clus_name] = pami_list        dic_pARI[clus_name] = pari_list        dic_pH[clus_name] = ph_list        dic_pC[clus_name] = pc_list        dic_pFMI[clus_name] = pfmi_list            return dic_pAMI, dic_pARI, dic_pH, dic_pC, dic_pFMIdef plot_clustering_metrics(dic_AMI, dic_ARI, dic_H, dic_C, dic_FMI, dic_NBCOM):        sns.set(style="whitegrid")        metrics_dict = {        "Adjusted Mutual Info (AMI)": dic_AMI,        "Adjusted Rand Index (ARI)": dic_ARI,        "Homogeneity": dic_H,        "Completeness": dic_C,        "Fowlkes-Mallows Index (FMI)": dic_FMI,        "Number of Communities": dic_NBCOM    }    nb_metrics = len(metrics_dict)    fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 8), sharex=True)    axes = axes.flatten()    time = list(range(len(next(iter(dic_AMI.values())))))      palette = sns.color_palette("husl", n_colors=len(dic_AMI))    clus_names = list(dic_AMI.keys())    for idx, (title, metric_dic) in enumerate(metrics_dict.items()):        ax = axes[idx]        for i, clus_name in enumerate(clus_names):            ax.plot(time, metric_dic[clus_name], label=clus_name, color=palette[i])        ax.set_title(title, fontsize=12)        ax.set_xlabel("Time step")        ax.set_ylabel("Score" if title != "Number of Communities" else "Count")        ax.legend(fontsize=8)    plt.tight_layout()    plt.show()    def compute_mean_metric(dic_clus, dic_AMI, dic_ARI, dic_H, dic_C, dic_FMI, dic_NBCOM):  for clus_name in dic_clus.keys():      print('\n ## {} ##'.format(clus_name))      print('mean AMI : {}'.format(np.mean(dic_AMI[clus_name])))      print('mean ARI : {}'.format(np.mean(dic_ARI[clus_name])))      print('mean H : {}'.format(np.mean(dic_H[clus_name])))      print('mean C : {}'.format(np.mean(dic_C[clus_name])))      print('mean FMI : {}'.format(np.mean(dic_FMI[clus_name])))      print('mean NBCOM : {}'.format(np.mean(dic_NBCOM[clus_name])))